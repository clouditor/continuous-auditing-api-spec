openapi: 3.0.0
info:
  description: |
    This API serves evidences for a continuous audit of a system. It originated
    in the European Union Horizon 2020 project
    [EU-SEC](https://www.sec-cert.eu). Its purpose is to support tools such as
    [Clouditor](https://www.clouditor.io) to collect evidences and evaluate them
    to determine the compliance status based on different control catalogs, such
    as the [Cloud Control Matrix](https://cloudsecurityalliance.org/group/cloud-controls-matrix).
  version: 1.0.9
  title: Continuous Auditing API
  termsOfService: https://www.sec-cert.eu/
  contact:
    email: contact@sec-cert.eu
    url: http://www.sec-cert.eu/
tags:
  - name: Scopes
    description: audit api calls
  - name: Objects
    description: audit api calls
  - name: Persistence
    description: audit api calls
  - name: Identity and Access Management
    description: audit api calls
paths:
  /scopes/:
    get:
      tags:
        - Scopes
      summary: Returns all scopes of the target system.
      description: A scope could be different layers, such as frontend or backend. The
        implementing system must implement at least one scope.
      operationId: getScopes
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScopeResponse"
        "405":
          description: Invalid input
      security:
        - api_key: []
        - basic_auth: []
      x-swagger-router-controller: CaApiScope
  "/{scope}/objects/":
    get:
      tags:
        - Objects
      summary: Returns Object ids of all objects that are in the scope of the audit.
      description: Returns the auditable object ids that are subject to the audit. The
        results can be limited according to a time range.
      operationId: getObjects
      parameters:
        - name: from
          in: query
          description: in ISO-8601 format. Timestamp refers to the last change of the
            object. e.g 2005-08-15T15:52:01+0000
          schema:
            type: string
        - name: to
          in: query
          description: in ISO-8601 format Timestamp refers to the last change of the
            object. e.g 2005-08-15T15:52:01+0000
          schema:
            type: string
        - name: limit
          in: query
          description: Limits the number of returned values
          required: false
          schema:
            type: integer
        - name: scope
          in: path
          description: Scope of service
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectResponse"
        "405":
          description: Invalid input
      security:
        - api_key: []
        - basic_auth: []
      x-swagger-router-controller: CaApiObjects
  "/{scope}/persistence/{objectId}/storage/":
    get:
      tags:
        - Persistence
      summary: Returns persistence information for a particular data object by its Id
      description: Depending on the kind of storage this call returns an identifier of the
        particular storage entity. E.g database name, RDS id, Harddrive, SMB
        location etc. If stored on multiple services all are returned. Based on
        CCM-GRM-02. This requires each logical object to be traceable to its
        physical persistence capabilities.
      operationId: getStorage
      parameters:
        - name: objectId
          in: path
          description: ID of data object to return
          required: true
          schema:
            type: string
        - name: scope
          in: path
          description: Scope of service
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationStorageResponse"
        "405":
          description: Invalid input
      security:
        - api_key: []
        - basic_auth: []
      x-swagger-router-controller: CaApiPersistence
  "/{scope}/persistence/{objectId}/location/":
    get:
      tags:
        - Persistence
      summary: Returns location the ISO 3166-1 alpha-2 country code of the location of
        the data of the object
      description: Retrieves the data location of an object. Returns location the ISO
        3166-1 alpha-2 country code of the location of the data of the object.
        Based on CCM-STA-05.
      operationId: getLocation
      parameters:
        - name: objectId
          in: path
          description: ID of either objectId on SaaS level or storeageId on lower level
          required: true
          schema:
            type: string
        - name: scope
          in: path
          description: Scope of the service
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeoLocation"
        "405":
          description: Invalid input
      security:
        - api_key: []
        - basic_auth: []
      x-swagger-router-controller: CaApiPersistence
  "/{scope}/persistence/{objectId}/encryption":
    get:
      tags:
        - Persistence
      summary: Retrieves the encryption info of an object.
      description: Based on CCM-EKM-04. Retrieves the encryption info of an object. Propper
        interpretation has to be performed by the audit tool.
      operationId: getEncryptionInfo
      parameters:
        - name: objectId
          in: path
          description: ID of either objectId on SaaS level or storeageId on lower level
          required: true
          schema:
            type: string
        - name: scope
          in: path
          description: Scope of the service
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionStorageResponse"
        "405":
          description: Invalid input
      security:
        - api_key: []
        - basic_auth: []
      x-swagger-router-controller: CaApiPersistence
  "/{scope}/iam/users/":
    get:
      tags:
        - Identity and Access Management
      summary: Returns a list of users
      description: Based on CCM-IAM-12. Reads out all administrators of the application and
        returns them.
      operationId: getAdmins
      parameters:
        - name: scope
          in: path
          description: Scope of the service
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminResponse"
        "405":
          description: Invalid input
      security:
        - api_key: []
        - basic_auth: []
      x-swagger-router-controller: CaApiIam
  "/{scope}/iam/{userId}/groups":
    get:
      tags:
        - Identity and Access Management
      summary: Returns the groups of a user
      description: Based on CCM-IAM-12. Depending on the implementation a group can be e.g
        a unix group, organisation, role etc.
      operationId: getUserOrganisation
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: string
        - name: scope
          in: path
          description: Scope of the service
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupsResponse"
        "405":
          description: Invalid input
      security:
        - api_key: []
        - basic_auth: []
      x-swagger-router-controller: CaApiIam
  "/{scope}/iam/{userId}/auth":
    get:
      tags:
        - Identity and Access Management
      summary: Returns the authentication type of a user. E.g password, two-factor
      description: Based on CCM-IAM-12. Reads out a particular users authentication
        settings and returns them. Propper interpretation has to be performed by
        the audit tool.
      operationId: getUserAuthType
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: string
        - name: scope
          in: path
          description: Scope of the service
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminAuth"
        "405":
          description: Invalid input
      security:
        - api_key: []
        - basic_auth: []
      x-swagger-router-controller: CaApiIam
  "/{scope}/iam/{userId}/logins":
    get:
      tags:
        - Identity and Access Management
      summary: Returns a list of the last logins of a user
      description: Based on CCM-IAM-12. Whenever a user logs in into the application this
        kind access gets logged. This call returns the last accesses of a
        particular user based on existing logs.
      operationId: getUserAccesses
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: string
        - name: from
          in: query
          description: from date in ISO-8601 format e.g 2005-08-15T15:52:01+0000
          required: false
          schema:
            type: string
        - name: to
          in: query
          description: to date in ISO-8601 format  e.g 2005-08-15T15:52:01+0000
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Limits the number of retuned values
          required: false
          schema:
            type: integer
        - name: scope
          in: path
          description: Scope of the service
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "405":
          description: Invalid input
      security:
        - api_key: []
        - basic_auth: []
      x-swagger-router-controller: CaApiIam
  "/{scope}/iam/data/access":
    post:
      tags:
        - Identity and Access Management
      summary: Checks whether a user has a certain access to an object.
      description: Checks whether a user has a certain access to an object.
      operationId: getObjectAccess
      parameters:
        - name: scope
          in: path
          description: Scope of the service
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccessRequest"
        description: request object
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessResponse"
        "405":
          description: Invalid input
      security:
        - api_key: []
        - basic_auth: []
      x-swagger-router-controller: CaApiIam
  "/{scope}/iam/{userId}/passwordRequirements":
    get:
      tags:
        - Identity and Access Management
      summary: returns the password requirements for a specific user
      description: Based on CCM-IAM-12. Strong authentication might require a strong
        password. Password requirements are a indicator for strong password and
        therefore can be part of an audit.
      operationId: getPasswordRequirements
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: string
        - name: scope
          in: path
          description: Scope of the service
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordRequirementsResponse"
        "405":
          description: Invalid input
      security:
        - api_key: []
        - basic_auth: []
      x-swagger-router-controller: CaApiIam
servers:
  - url: /audit
components:
  securitySchemes:
    basic_auth:
      type: http
      scheme: basic
    api_key:
      type: apiKey
      name: api_key
      in: header
  schemas:
    ScopeResponse:
      type: object
      properties:
        scopes:
          type: array
          items:
            type: string
          example:
            - SaaS
            - PasS
            - IaaS
      required:
        - scopes
    ObjectResponse:
      type: object
      properties:
        objects:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              type:
                type: string
          example:
            - id: m121
              type: message
            - id: f6
              type: file
            - id: COO.200.200.2.244
              type: file
        incomplete_result:
          type: boolean
          default: false
    LocationStorageResponse:
      type: object
      properties:
        storages:
          type: array
          items:
            type: object
            properties:
              storageUri:
                type: string
              type:
                $ref: "#/components/schemas/StorageType"
              description:
                type: string
                description: Description should have comments that specify information,
                  that will be stored in the description field. E.g., based on
                  5.6. call, description should contain technical details like
                  database type with its version.
            required:
              - storageUri
              - type
          example:
            - uri: i-0434c5582f2853d0c
              type: service
              description: AWS EC2 instance
            - uri: vol-04b6088c76eb68a73
              type: service
              description: AWS EBS instance
            - uri: jdbc:mysql://192.168.0.10/SuperDB
              type: database
      required:
        - storages
    EncryptionStorageResponse:
      type: object
      properties:
        encryption:
          type: object
          description: Object contains information about the key origin depending on type
          properties:
            keyOriginUri:
              type: string
            algorithm:
              type: string
            type:
              $ref: "#/components/schemas/KeyOriginType"
            description:
              type: string
              description: Comments on technical details of the key origin.
          required:
            - keyOriginUri
            - type
      example:
        encryption:
          keyOriginUri: hsm://secret.datacenterX
          type: hsm
          description: Supersecure HSM
          algorithm: RSA-OAEP 2048 SHA-256
      required:
        - keyOrigin
    AdminAuth:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/AuthType"
        description:
          type: string
      required:
        - type
    AccessType:
      type: string
      enum:
        - fullAccess
        - changeAccess
        - readAccess
    StorageType:
      type: string
      enum:
        - database
        - filesystem
        - service
        - other
    KeyOriginType:
      type: string
      enum:
        - hsm
        - localKeyFile
        - other
    AuthType:
      type: string
      enum:
        - oneFactor
        - twoFactor
        - multiFactor
    GeoLocation:
      type: object
      properties:
        countryCode:
          type: string
          example: at
          description: ISO 3166-1 alpha-2 country code
      required:
        - countryCode
    AccessRequest:
      type: object
      properties:
        userId:
          type: string
        objectId:
          type: string
        access:
          $ref: "#/components/schemas/AccessType"
      required:
        - userId
        - objectId
        - access
    GroupsResponse:
      type: object
      properties:
        groups:
          type: array
          items:
            type: string
          example:
            - root
            - awsEc2Full
            - users
      required:
        - groups
    LoginResponse:
      type: object
      properties:
        loginTimes:
          type: array
          description: List of iso date time. Y-m-d\TH:i:sO ISO-8601
          items:
            type: string
          example:
            - 2005-08-15T15:52:01+0000
      required:
        - loginTimes
    AccessResponse:
      type: object
      properties:
        allowed:
          type: boolean
          description: true if access is allowd and false if its not.
      required:
        - allowed
    AdminResponse:
      type: object
      properties:
        admins:
          type: array
          items:
            type: string
          example:
            - adminXYZ
            - root
            - caixaAuth
      required:
        - admins
    PasswordRequirementsResponse:
      type: object
      properties:
        passwordRequirements:
          type: object
          properties:
            minimalLength:
              type: integer
              example: 10
            upperAndLowerCaseEnforcement:
              type: boolean
            numericCharacterEnforcement:
              type: boolean
            specialCharacterEnforcement:
              type: boolean
    SubmittedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              uri:
                type: string
                example: nextcloud.log
              endpoint:
                type: string
                example: https://endpoint:8080?push
              timeSubmitted:
                type: string
                description: to date in ISO-8601 format
                example: 2005-08-15T15:52:01+0000
